// Que: Cyclic rotate an array by one
// Given : [1,2,3,4,5]
// Ans : [5,1,2,3,4]

fun main() {
    val urArray:ArrayList<Int> = arrayListOf(9, 8, 7, 6, 4, 2, 1, 3)
//    val cyclicalArray = rotator1(urArray)
//    val cyclicalArray = rotator2(urArray)
//    println("Cyclic Array is = $cyclicalArray")
}


// Approach 1: 
// Shiftting the last element to the first

// Time complexity : O(N) || Length of Array
// Space Complexity : O(1) || Constant time Space

//fun rotator1(array:ArrayList<Int>):ArrayList<Int>{
//    var temp: Int
//    for (i in (array.size-2).downTo(0)){
//
//            temp = array[i+1]
//            array[i+1] = array[i]
//            array[i] = temp
//    }
//    return array
//}






// Approach 2 : 
// 1) store the last element
// 2) shift all the element by 1
// 3) replace first element with last one


// Time complexity : O(N) || Length of Array
// Space Complexity : O(1) || Constant time Space

//fun rotator2(array:ArrayList<Int>):ArrayList<Int>{
//    var last:Int = array[array.size-1]
//    for (i in (array.size-2).downTo(0))
//      array[i+1] = array[i]
//    array[0] = last
//    return array
//}