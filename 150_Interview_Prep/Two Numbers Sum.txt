// Que: Find the 2 numbers that sum up to 10 from the given array
// [3,5,-4,8,11,1,-1,6] from this ans will be [11,-1]





fun main() {
    val userArray:ArrayList<Int> = arrayListOf(3, 5, -4, 8, 11, 1, -1, 6)
    var size = userArray.size
    var first: Int? = null
    var sec: Int? = null
    var target: Int = 9
//  var sol1:ArrayList<Int> = sol1(userArray,size,target)
//  println(sol1)
//  var sol2:ArrayList<Int> = sol2(userArray,size,target)
//  println(sol2)
//  var sol3:ArrayList<Int> = sol3(userArray,size,target)
//  println(sol3)

}


// Sol1:
// Time Complexity : O(n^2)  // For 2 for loops ..
// Space Complexity : O(1) // For saving the variables in 2 spaces ...

//    fun sol1(userArray: ArrayList<Int?>, size: Int, target: Int?): ArrayList<Int> {
//        var first:Int?
//        var sec:Int?
//        var resultArray = arrayListOf(0,0)
//        for (a in 0..size-1)
//        {
//           first = userArray[a]
//            for (b in a+1..size-1)
//            {
//                sec = userArray[b]
//                if (first!! + sec!! == target){
//                    resultArray[0] = first
//                    resultArray[1] = sec
//                    return resultArray
//                }
//            }
//        }
//        return resultArray
//    }



// Sol2:
// Motive : x + y = 10
// We will apply 10 - x = y

// Time Complexity : O(n) || For traversing the whole array
// Space Complexity : O(1) || For saving only 2 variables only

//fun sol2(userArray: ArrayList<Int?>, size: Int, target: Int): ArrayList<Int> {
//    var temp:Int? = null
//    var resultArray = arrayListOf(0,0)
//    for (a in 0..size-1)
//    {
//        temp = target - userArray[a]!!
//        if (userArray.contains(temp)){
//            resultArray[0] = temp
//            resultArray[1] = userArray[a]!!
//        }
//    }
//    return resultArray
//}



// sol3:
// [3,5,-4,8,11,1,-1,6] in this array left will be 3 and right will be 6
// now if we traverse the array like :
/*
    under 3 conditions :

    1) 10 = x + y -> return [x,y]
    2) if (x + y) < left ++
    2) if (x + y) > right --

 */

// Time Complexity : O(nlog(n))
// Space Complexity : O(1)
// ***** This is the most optimal way !! *****

//fun sol3(userArray: ArrayList<Int>, size: Int, target: Int): ArrayList<Int>{
//    var left:Int = userArray[0]
//    var right:Int = userArray[size-1]
//    userArray.sort()
//    var resultArray = arrayListOf(0,0)
//
//
//    while (left < right)
//    {
//        if (target == (userArray[left] + (userArray[right])))
//        {
//            resultArray[0] = userArray[left]
//            resultArray[1] = userArray[right]
//            return resultArray
//
//        }else if((userArray[left].plus(userArray[right])) < target){
//            left++
//        }else if((userArray[left].plus(userArray[right])) > target){
//            right--
//        }
//    }
//
//    return resultArray
//}
/*

*/